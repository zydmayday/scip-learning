Q:
Exercise 1.7.  The good-enough? test used in computing square roots will not be very effective for finding the square roots of very small numbers. Also, in real computers, arithmetic operations are almost always performed with limited precision. This makes our test inadequate for very large numbers. Explain these statements, with examples showing how the test fails for small and large numbers. An alternative strategy for implementing good-enough? is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. Does this work better for small and large numbers?

A:
当数字过小，以至于平方根都小于0.001的时候，函数就失效了。
当数字过大时，需要的收敛次数过多，有可能超过栈的最大使用次数。

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (square x)
  (* x x))

(define (improve guess x)
  (average guess (/ x guess)))

(define (average x guess)
  (/ (+ x guess) 2))

(define (zyd-sqrt x)
  (sqrt-iter 1 x))

(zyd-sqrt 2)

(define (new-if pred then-c else-c)
  (cond (pred then-c)
        (else else-c)))

(define (sqrt-iter2 guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter2 (improve guess x)
                     x)))

(define (zyd-sqrt2 x)
  (sqrt-iter 1 x))

(zyd-sqrt2 9)

(define (new-good-enough? old-guess new-guess)
  (> 0.01
     (/ (abs (- new-guess old-guess))
        old-guess)))

(define (new-sqrt-iter guess x)
  (if (new-good-enough? guess (improve guess x))
      (improve guess x)
      (new-sqrt-iter (improve guess x) x)))

(define (new-sqrt x)
  (new-sqrt-iter 1 x))

(new-sqrt 2)